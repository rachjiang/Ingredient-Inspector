const express = require('express');
const multer = require('multer');
const path = require('path');
const router = express.Router();

// Multer is a middleware that adds a body object and a file or files object to the request object. The body object contains the values of the text fields of the form, the file or files object contains the files uploaded via the form

const dotenv = require('dotenv');
 // This sets up our environment variables by using the .env file
dotenv.config();

// This provides access to the Clarifai API capabilites; ClarifaiStub contains all the methods available in the api, and the Metadata obj
const {ClarifaiStub, grpc} = require("clarifai-nodejs-grpc");

const stub = ClarifaiStub.grpc();
// Metadata object is used for authentiation
const metadata = new grpc.Metadata();

metadata.set("authorization", `Key ${process.env.CLARIFAI_KEY}`);

function checkFileType(file, cb) {
    const filetypes = /jpeg|jpg|png/;
    // check ext
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    // check mimetype
    const mimetype = filetypes.test(file.mimetype);
    // To reject this file pass `false`, like so:   
    //    cb(null, false);
    // To accept the file pass `true`, like so:   
    //    cb(null, true);   
    // You can always pass an error if something goes wrong:   
    //    cb(new Error('I don\'t have a clue!')); 
    if (mimetype && extname) {
        return cb(null, true);
    } else {
        cb('Error: Images only!');
    }
}

// multer accepts options, see docs
// each file submitted to form contains many properties, such as field name, originalname(name of file on user's computer), mimetype(type of file) and  more. See https://afteracademy.com/blog/file-upload-with-multer-in-nodejs-and-express on how to write a fileFilter
const upload = multer({ 
    storage: multer.memoryStorage({}),
    limits: { fileSize: 2000000 }, // in bytes === 2MB
    fileFilter: function (_req, file, cb) {
        checkFileType(file, cb);
    }
 });

// npm's clarifai set up instructions provides the code to predict concepts in an image. We'll place this code inside predictImage()
function predictImage(inputs) {
    return new Promise((resolve, reject) => {
        stub.PostModelOutputs(
            {

                // This is the model ID of a publicly available Food model. You may use any other public or custom model ID.

                model_id: "food-item-recognition",
                // original inputs value from npm was replaced with our inputs argument
                inputs: inputs
            },
            metadata,
            (err, response) => {
                if (err) {
                    // line 30 updated with reject arg
                    reject("Error: " + err);
                    return;
                }
        
                if (response.status.code !== 10000) {
                    console.log("Received failed status: " + response.status.description + "\n" + response.status.details);
                    return;
                }
                let results = [];
                console.log("Predicted concepts, with confidence values:")
                for (const c of response.outputs[0].data.concepts) {
                    console.log(c.name + ": " + c.value);
                    // at line 40, a response is logged. We also want to store these results in our array from line 38, so we need to push them
                    results.push({
                        name: c.name, // represents label
                        value: c.value // represents probability generated by API model
                    })
                }
                // here, we resolve the prediction with some results since it was successful
                resolve(results);
            }
        );
    })
}

// We imported express at the start of file so that we could write this route to send the results to client side
router.post('/', async function (req, res) {
    try {
        // when a user submits an image, it's stores in our request body. we want to destructure it and store it in our inputs array
        const { imageUrl } = req.body;
        const inputs = [
            {
                data: { // in our data object, we have a image key, with the value of an obj, whose obj has a url key, with the imageUrl value
                    image: {
                        url: imageUrl
                    }
                }
            }
        ]
        // lets pass the image from our request body into our predictImage function we created earlier
        // failed prediction -> error -> reject(error)
        // successful prediction -> response output with label + probability -> resolve(results)
        const results = await predictImage(inputs);
        return res.send({results})
    }
    catch (err) {
        return res.status(400).send({
            error: err
        })
    }
})

// upload image request
router.post('/upload', upload.single('file'), async function (req, res) {
    try {
        const inputs = [
            {
                data: {
                    image: {
                        base64: req.file.buffer // buffer is included with file as a prop when passed through the multer middleware
                    }
                }
            }
        ]
        const results = await predictImage(inputs);
        return res.send({
            results
        })
    }
    catch(err) {
        res.status(400).send({
            error: err
        });
    }
})

// export this file to server/app.js so it can direct post requests to this route
module.exports = router;